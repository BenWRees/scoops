# Anonymous scoop.
# Executed immediately.
{
    # ...
}


# Named scoop.
# Can be referenced but is not executed by default.
scoop my_scoop
{
    # ...
}


# Self-executing scoop.
# This is a named scoop that may be called later,
# however, the keyword 'exec' after the scoop's 
# name means that this scoop will be executed
# immediately just like an anonymous scoop 
# at the very top of the file.
scoop selfie exec
{
    # ...
}


# Scoop that accepts arguments and returns values.
# Scoops that accept parameters must be named.
scoop funky_scoop(a, b)
{
    # ...
    return a + b
}


# One-liner.
# This one-liner always returns 42.
scoop oneliner return 42


# One-liner that doesn't return any values.
# Such one-liners can be used for outputing
# something to the screen or any other
# action that doesn't require returning stuff.
scoop impotent(a, b) { c := a - b }


# Function-like one-liner.
# These are some mathematical functions.
scoop sqr(n) return n * n
scoop sqrt(n) return n ^ 0.5


# Anonymous scoop that returns multiple values.
# Scoops that don't expect any arguments 
# don't have to have a name.
# It is anonymous and thus, it will be executed
# immediately. 
# Anonymous scoops that return values can only be defined
# inside another scoops as there is no global variable 
# space where these returns can be stored once they are unpacked.
scoop parent
{
    s, n := {
        return "the meaning of life is", 42
    }
}


# Scoop that returns values of its variables.
# This is the second example of unpacking the
# anonymous scoop's returns into the variables 
# of its parent scoop.
# If you want to use some anonymous scoop's
# return values, you have to unpack them into
# the variables of the parent scoop.
scoop parent
{
    s, n := {
        meaning := "the meaning of life is"
        number := 42
        return meaning, number
    } 
}


# Named scoop that returns values.
scoop returner_sims
{
    # ...
    return 42
}


# Named scoop that returns values of its variables.
scoop returner_vars
{
    # ...
    number := 42
    city := "Southampton"
    return number, city
} 


# Named scoop that returns two anonymous values.
scoop pair
{
    return 42, "Southampton"
}


# Anonymous scope that uses variables from
# its parent scoop.
# The 'grab' operator that you see below in the 
# anonymous scoop that unpacks into the 'meaning'
# variable is used to get some variable(s) from
# the parent scoop and use them inside the
# anonymous scoop. This operator must only ever
# be used in an anonymous scoops since named
# scoops can receive values as arguments.
# The 'grab' also only works for the immediate
# parent scoop -- not for any parent scoop.
# See the next example for more.
scoop parent
{
    a := 21
    meaning := {
        grab a
        return 2 * a
    }
}


# Anonymous scoop that tries to grab a variable
# from beyond its reach.
scoop the_parent
{
    eves_apple := "Apple"
    company := {
        c := {
            grab eves_apple # error
            return eves_apple + ".Inc"
        }
        return c
    }
}


# Anonymous scoop that succeeds at grabbing
# the variable from 'the_parent'.
scoop the_parent
{
    eves_apple := "Apple"
    company := {
        grab eves_apple
        c := {
            grab eves_apple # no error this time
            return eves_apple + ".Inc"
        }
        return c
    }
}


# Scoop that uses previous scoops.
scoop user
{
    # This line references the 'returner_sims' scoop
    # without accepting its return value.
    # In this case, 'returner_sims' is going to be
    # executed and all the commands behind '...' are
    # still going to be run but the return value will be
    # discarded so that it will have no impact on the
    # structure of the 'user' scoop.
    returner_sims()
    

    # This line references the 'returner_sims' scoop
    # and accepts its return value by assigning it to
    # the 'number' variable. The 'returner_sims' scoop
    # is executed yet again, but this time its return
    # value is not going to be discarded -- since we
    # gave it a name, we can use it in the 'user' scoop.
    number := returner_sims() 


    # This line uses the 'returner_sims' scoop in some calculations,
    # accepting its return value without naming it. This can only
    # be done to a scoop that returns one or more values. If the
    # 'returner_sims' scoop had more than one return value, the
    # first return value would be used in an expression -- the rest
    # of the values will be discarded.
    fifty := returner_sims() + 8


    # This line will unpack the returns from the
    # 'returnver_vars' scoop.
    # In this example, the 'user' scoop receives two
    # variables called 'num' and 'town'.
    # If you decide to unpack the return variables this way,
    # you have to either
    # 1. Make the list of new names to be the same length
    #    as the number of returns;
    # 2. Make the list of new names shorter than the number
    #    of returns.
    # In the second case, if you provide n new names, only the
    # first n returns will be accepted -- the rest of the
    # values will be discarded..
    num, town := returner_vars()


    # Here, we will only receive the first returned value
    # from the scoop called 'pair' that returns two values.
    # In this case, the second value will be discarded.
    # We've seen similar behaviour on the first line of
    # this 'parent' scoop, however, in that case all return
    # values have been discarded. 
    only_first := pair()


    # Here we use the 'funky_scoop' to add two numbers together
    # and put the result into a variable.
    a := 8
    b := returner_sims()
    c := funky_scoop(a, b)
}

